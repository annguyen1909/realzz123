{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\nexport const JOB_TYPES = {\n  LOADING_JOB: 'LOADING_JOB',\n  APPLY_JOB: 'APPLY_JOB',\n  GET_JOBS: 'GET_JOBS',\n  GET_DETAIL_JOB: 'GET_DETAIL_JOB',\n  UPDATE_JOBS: 'UPDATE_JOBS'\n};\nexport const applyJob = (data, auth, status) => async dispatch => {\n  if (data.sop.length < 10) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Your reason to apply is too short\"\n    }\n  }); // console.log(data)\n  // console.log(status._id)\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(`post/${status._id}/job`, data, auth.token); // console.log(res)\n\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    });\n    dispatch({\n      type: JOB_TYPES.APPLY_JOB,\n      payload: { ...res.data.newJobApply,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getJobs = token => async dispatch => {\n  try {\n    dispatch({\n      type: JOB_TYPES.LOADING_JOB,\n      payload: true\n    });\n    const res = await getDataAPI('jobs', token);\n    dispatch({\n      type: JOB_TYPES.GET_JOBS,\n      payload: res.data\n    });\n    dispatch({\n      type: JOB_TYPES.LOADING_JOB,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getDetailJob = (id, token) => async dispatch => {\n  try {\n    dispatch({\n      type: JOB_TYPES.LOADING_JOB,\n      payload: true\n    });\n    const res = await getDataAPI(`post/${id}/job`, token);\n    dispatch({\n      type: JOB_TYPES.GET_DETAIL_JOB,\n      payload: res.data\n    });\n    dispatch({\n      type: JOB_TYPES.LOADING_JOB,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateJob = (data, id, token) => async dispatch => {\n  try {\n    console.log({\n      data,\n      id,\n      token\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/jobAction.js"],"names":["GLOBALTYPES","getDataAPI","postDataAPI","JOB_TYPES","LOADING_JOB","APPLY_JOB","GET_JOBS","GET_DETAIL_JOB","UPDATE_JOBS","applyJob","data","auth","status","dispatch","sop","length","type","ALERT","payload","error","loading","res","_id","token","newJobApply","user","success","msg","err","response","getJobs","getDetailJob","id","updateJob","console","log"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\n\r\nexport const JOB_TYPES = {\r\n    LOADING_JOB: 'LOADING_JOB',\r\n    APPLY_JOB: 'APPLY_JOB',\r\n    GET_JOBS: 'GET_JOBS',\r\n    GET_DETAIL_JOB: 'GET_DETAIL_JOB',\r\n    UPDATE_JOBS: 'UPDATE_JOBS',\r\n\r\n}\r\n\r\nexport const applyJob = (data, auth, status) => async(dispatch) => {\r\n    if (data.sop.length < 10) return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your reason to apply is too short\"}})\r\n    // console.log(data)\r\n    // console.log(status._id)\r\n    try {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: { loading: true }})\r\n        const res = await postDataAPI(`post/${status._id}/job`, data, auth.token)\r\n        // console.log(res)\r\n\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: { loading: false }})\r\n        dispatch({ \r\n            type: JOB_TYPES.APPLY_JOB, \r\n            payload: {...res.data.newJobApply, user: auth.user} \r\n        })\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                success: res.data.msg\r\n            })\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }   \r\n}\r\n\r\nexport const getJobs = (token) => async(dispatch) => {\r\n    try {\r\n        dispatch({type: JOB_TYPES.LOADING_JOB, payload: true })\r\n        const res = await getDataAPI('jobs', token)\r\n        dispatch({\r\n            type: JOB_TYPES.GET_JOBS,\r\n            payload: res.data\r\n        })\r\n        dispatch({ type: JOB_TYPES.LOADING_JOB, payload: false })\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const getDetailJob = (id, token) => async(dispatch) => {\r\n    try {\r\n        dispatch({type: JOB_TYPES.LOADING_JOB, payload: true })\r\n        const res = await getDataAPI(`post/${id}/job`, token)\r\n        \r\n        dispatch({\r\n            type: JOB_TYPES.GET_DETAIL_JOB,\r\n            payload: res.data\r\n        })\r\n        dispatch({ type: JOB_TYPES.LOADING_JOB, payload: false })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateJob = (data, id, token) => async(dispatch) => {\r\n    try {\r\n        console.log({data, id, token})\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}