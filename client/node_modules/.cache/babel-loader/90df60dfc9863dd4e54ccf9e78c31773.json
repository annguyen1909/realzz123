{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport useCustomRouter from '../hook/useCustomRoute';\n\nconst usePagination = (totalPages, page, sort) => {\n  _s();\n\n  const {\n    pushQuery\n  } = useCustomRouter();\n  const {\n    firstArr,\n    lastArr\n  } = useMemo(() => {\n    const newArr = [...Array(totalPages)].map((_, i) => i + 1);\n    if (totalPages < 4) return {\n      firstArr: newArr,\n      lastArr: []\n    };\n\n    if (totalPages - page >= 4) {\n      return {\n        firstArr: newArr.slice(page - 1, page + 2),\n        lastArr: newArr.slice(totalPages - 1)\n      };\n    } else {\n      return {\n        firstArr: newArr.slice(totalPages - 4, totalPages),\n        lastArr: []\n      };\n    }\n  }, [totalPages, page]);\n\n  const isActive = index => {\n    if (index === page) return \"active\";\n    return \"\";\n  };\n\n  const prev = () => {\n    const newPage = Math.max(page - 1, 1);\n    pushQuery({\n      page: newPage,\n      sort\n    });\n  };\n\n  const next = () => {\n    const newPage = Math.min(page + 1, totalPages);\n    pushQuery({\n      page: newPage,\n      sort\n    });\n  };\n\n  const jump = num => {\n    pushQuery({\n      page: num,\n      sort\n    });\n  };\n\n  return {\n    firstArr,\n    lastArr,\n    isActive,\n    prev,\n    next,\n    jump\n  };\n};\n\n_s(usePagination, \"OrKma5yB6aH8hUI5Tb5SB+xPl9U=\", false, function () {\n  return [useCustomRouter];\n});\n\nexport default usePagination;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/hook/usePagination.jsx"],"names":["React","useMemo","useCustomRouter","usePagination","totalPages","page","sort","pushQuery","firstArr","lastArr","newArr","Array","map","_","i","slice","isActive","index","prev","newPage","Math","max","next","min","jump","num"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,eAAP,MAA4B,wBAA5B;;AAEA,MAAMC,aAAa,GAAG,CAACC,UAAD,EAAaC,IAAb,EAAmBC,IAAnB,KAA4B;AAAA;;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAgBL,eAAe,EAArC;AAEA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBR,OAAO,CAAC,MAAM;AAC1C,UAAMS,MAAM,GAAG,CAAC,GAAGC,KAAK,CAACP,UAAD,CAAT,EAAuBQ,GAAvB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAAzC,CAAf;AAEA,QAAGV,UAAU,GAAG,CAAhB,EACE,OAAO;AACLI,MAAAA,QAAQ,EAAEE,MADL;AAELD,MAAAA,OAAO,EAAE;AAFJ,KAAP;;AAKF,QAAGL,UAAU,GAAGC,IAAb,IAAqB,CAAxB,EAA0B;AACxB,aAAO;AACLG,QAAAA,QAAQ,EAAEE,MAAM,CAACK,KAAP,CAAaV,IAAI,GAAG,CAApB,EAAuBA,IAAI,GAAG,CAA9B,CADL;AAELI,QAAAA,OAAO,EAAEC,MAAM,CAACK,KAAP,CAAaX,UAAU,GAAG,CAA1B;AAFJ,OAAP;AAID,KALD,MAKK;AACH,aAAO;AACLI,QAAAA,QAAQ,EAAEE,MAAM,CAACK,KAAP,CAAaX,UAAU,GAAG,CAA1B,EAA6BA,UAA7B,CADL;AAELK,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;AACF,GApBoC,EAoBlC,CAACL,UAAD,EAAaC,IAAb,CApBkC,CAArC;;AAwBA,QAAMW,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAGA,KAAK,KAAKZ,IAAb,EAAmB,OAAO,QAAP;AACnB,WAAO,EAAP;AACD,GAHD;;AAKA,QAAMa,IAAI,GAAG,MAAM;AACjB,UAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAShB,IAAI,GAAG,CAAhB,EAAmB,CAAnB,CAAhB;AACAE,IAAAA,SAAS,CAAC;AAACF,MAAAA,IAAI,EAAEc,OAAP;AAAgBb,MAAAA;AAAhB,KAAD,CAAT;AACD,GAHD;;AAKA,QAAMgB,IAAI,GAAG,MAAM;AACjB,UAAMH,OAAO,GAAGC,IAAI,CAACG,GAAL,CAASlB,IAAI,GAAG,CAAhB,EAAmBD,UAAnB,CAAhB;AACAG,IAAAA,SAAS,CAAC;AAACF,MAAAA,IAAI,EAAEc,OAAP;AAAgBb,MAAAA;AAAhB,KAAD,CAAT;AACD,GAHD;;AAKA,QAAMkB,IAAI,GAAIC,GAAD,IAAS;AACpBlB,IAAAA,SAAS,CAAC;AAACF,MAAAA,IAAI,EAAEoB,GAAP;AAAYnB,MAAAA;AAAZ,KAAD,CAAT;AACD,GAFD;;AAIA,SAAO;AAAEE,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBO,IAAAA,QAArB;AAA+BE,IAAAA,IAA/B;AAAqCI,IAAAA,IAArC;AAA2CE,IAAAA;AAA3C,GAAP;AACD,CA/CD;;GAAMrB,a;UACkBD,e;;;AAgDxB,eAAeC,aAAf","sourcesContent":["import React, { useMemo } from 'react'\r\nimport useCustomRouter from '../hook/useCustomRoute'\r\n\r\nconst usePagination = (totalPages, page, sort) => {\r\n  const { pushQuery } = useCustomRouter()\r\n\r\n  const { firstArr, lastArr } = useMemo(() => {\r\n    const newArr = [...Array(totalPages)].map((_, i) => i + 1)\r\n\r\n    if(totalPages < 4)\r\n      return {\r\n        firstArr: newArr,\r\n        lastArr: []\r\n      }\r\n\r\n    if(totalPages - page >= 4){\r\n      return {\r\n        firstArr: newArr.slice(page - 1, page + 2),\r\n        lastArr: newArr.slice(totalPages - 1)\r\n      }\r\n    }else{\r\n      return {\r\n        firstArr: newArr.slice(totalPages - 4, totalPages),\r\n        lastArr: []\r\n      }\r\n    }\r\n  }, [totalPages, page])\r\n\r\n  \r\n\r\n  const isActive = (index) => {\r\n    if(index === page) return \"active\"\r\n    return \"\"\r\n  }\r\n\r\n  const prev = () => {\r\n    const newPage = Math.max(page - 1, 1)\r\n    pushQuery({page: newPage, sort})\r\n  }\r\n\r\n  const next = () => {\r\n    const newPage = Math.min(page + 1, totalPages)\r\n    pushQuery({page: newPage, sort})\r\n  }\r\n\r\n  const jump = (num) => {\r\n    pushQuery({page: num, sort})\r\n  }\r\n\r\n  return { firstArr, lastArr, isActive, prev, next, jump }\r\n}\r\n\r\nexport default usePagination"]},"metadata":{},"sourceType":"module"}