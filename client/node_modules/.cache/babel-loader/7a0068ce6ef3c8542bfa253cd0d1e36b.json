{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\nexport const JOB_TYPES = {\n  LOADING_JOB: 'LOADING_JOB',\n  APPLY_JOB: 'APPLY_JOB',\n  GET_JOBS: 'GET_JOBS',\n  UPDATE_JOBS: 'UPDATE_JOBS'\n};\nexport const applyJob = (data, auth, status) => async dispatch => {\n  if (data.sop.length < 10) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Your reason to apply is too short\"\n    }\n  });\n  console.log(data); // console.log(status._id)\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(`post/${status._id}/job`, data, auth.token); // console.log(res)\n\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    });\n    dispatch({\n      type: JOB_TYPES.APPLY_JOB,\n      payload: { ...res.data.newJobApply,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getJobs = token => async dispatch => {\n  try {\n    dispatch({\n      type: JOB_TYPES.LOADING_JOB,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getDataAPI('jobs', token);\n    dispatch({\n      type: JOB_TYPES.GET_JOBS,\n      payload: res.data\n    });\n    dispatch({\n      type: JOB_TYPES.LOADING_JOB,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/jobAction.js"],"names":["GLOBALTYPES","getDataAPI","postDataAPI","JOB_TYPES","LOADING_JOB","APPLY_JOB","GET_JOBS","UPDATE_JOBS","applyJob","data","auth","status","dispatch","sop","length","type","ALERT","payload","error","console","log","loading","res","_id","token","newJobApply","user","success","msg","err","response","getJobs"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\r\n\r\nexport const JOB_TYPES = {\r\n    LOADING_JOB: 'LOADING_JOB',\r\n    APPLY_JOB: 'APPLY_JOB',\r\n    GET_JOBS: 'GET_JOBS',\r\n    UPDATE_JOBS: 'UPDATE_JOBS',\r\n\r\n}\r\n\r\nexport const applyJob = (data, auth, status) => async(dispatch) => {\r\n    if (data.sop.length < 10) return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your reason to apply is too short\"}})\r\n    console.log(data)\r\n    // console.log(status._id)\r\n    try {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: { loading: true }})\r\n        const res = await postDataAPI(`post/${status._id}/job`, data, auth.token)\r\n        // console.log(res)\r\n\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: { loading: false }})\r\n        dispatch({ \r\n            type: JOB_TYPES.APPLY_JOB, \r\n            payload: {...res.data.newJobApply, user: auth.user} \r\n        })\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                success: res.data.msg\r\n            })\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }   \r\n}\r\n\r\nexport const getJobs = (token) => async(dispatch) => {\r\n    try {\r\n        dispatch({type: JOB_TYPES.LOADING_JOB, payload: { loading: true }})\r\n        const res = await getDataAPI('jobs', token)\r\n        dispatch({\r\n            type: JOB_TYPES.GET_JOBS,\r\n            payload: res.data\r\n        })\r\n        dispatch({ type: JOB_TYPES.LOADING_JOB, payload: {loading: false} })\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}