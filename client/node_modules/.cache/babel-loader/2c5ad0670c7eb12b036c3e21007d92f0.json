{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { imageUpload } from \"../../utils/imgUpload\";\nimport { getDataAPI, postDataAPI } from \"../../utils/fetchData\";\nexport const POST_TYPES = {\n  // LOADING: 'LOADING',\n  CREATE_POST: 'CREATE_POST',\n  GET_POST: 'GET_POST'\n};\nexport const createPost = (data, images, auth) => async dispatch => {\n  // console.log({data, images}, auth)\n  let media = [];\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (images.length > 0) media = await imageUpload(images, auth.token);\n    const newData = { ...data,\n      images: media\n    };\n    const res = await postDataAPI('posts', newData, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: { ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getDataAPI('posts', token);\n    console.log(res);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","imageUpload","getDataAPI","postDataAPI","POST_TYPES","CREATE_POST","GET_POST","createPost","data","images","auth","dispatch","media","type","ALERT","payload","loading","length","token","newData","res","newPost","user","success","msg","err","error","response","getPosts","console","log"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,uBAAxC;AAGA,OAAO,MAAMC,UAAU,GAAG;AACtB;AACAC,EAAAA,WAAW,EAAE,aAFS;AAGtBC,EAAAA,QAAQ,EAAE;AAHY,CAAnB;AAMP,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,IAAf,KAAwB,MAAMC,QAAN,IAAmB;AACjE;AAEA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,MAAI;AACAD,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEb,WAAW,CAACc,KAAnB;AAA0BC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAnC,KAAD,CAAR;AAEA,QAAGP,MAAM,CAACQ,MAAP,GAAgB,CAAnB,EAAsBL,KAAK,GAAG,MAAMX,WAAW,CAACQ,MAAD,EAASC,IAAI,CAACQ,KAAd,CAAzB;AACtB,UAAMC,OAAO,GAAG,EAAC,GAAGX,IAAJ;AAAUC,MAAAA,MAAM,EAAEG;AAAlB,KAAhB;AAEA,UAAMQ,GAAG,GAAG,MAAMjB,WAAW,CAAC,OAAD,EAAUgB,OAAV,EAAmBT,IAAI,CAACQ,KAAxB,CAA7B;AAEAP,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET,UAAU,CAACC,WADZ;AAELU,MAAAA,OAAO,EAAE,EAAC,GAAGK,GAAG,CAACZ,IAAJ,CAASa,OAAb;AAAsBC,QAAAA,IAAI,EAAEZ,IAAI,CAACY;AAAjC;AAFJ,KAAD,CAAR;AAMAX,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEb,WAAW,CAACc,KAApB;AAA2BC,MAAAA,OAAO,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV;AAApC,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEb,WAAW,CAACc,KADb;AAELC,MAAAA,OAAO,EAAG;AACNQ,QAAAA,OAAO,EAAEH,GAAG,CAACZ,IAAJ,CAASgB;AADZ;AAFL,KAAD,CAAR;AAOH,GAtBD,CAsBE,OAAOC,GAAP,EAAY;AACVd,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEb,WAAW,CAACc,KADb;AAELC,MAAAA,OAAO,EAAG;AACNW,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAanB,IAAb,CAAkBgB;AADnB;AAFL,KAAD,CAAR;AAMH;AACJ,CAnCM;AAqCP,OAAO,MAAMI,QAAQ,GAAIV,KAAD,IAAW,MAAMP,QAAN,IAAmB;AAClD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEb,WAAW,CAACc,KAAnB;AAA0BC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAnC,KAAD,CAAR;AACA,UAAMI,GAAG,GAAG,MAAMlB,UAAU,CAAC,OAAD,EAAUgB,KAAV,CAA5B;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AAEAT,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEb,WAAW,CAACc,KAApB;AAA2BC,MAAAA,OAAO,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV;AAApC,KAAD,CAAR;AACH,GAND,CAME,OAAOS,GAAP,EAAY;AACVd,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEb,WAAW,CAACc,KADb;AAELC,MAAAA,OAAO,EAAG;AACNW,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAanB,IAAb,CAAkBgB;AADnB;AAFL,KAAD,CAAR;AAMH;AACJ,CAfM","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\"\r\nimport { imageUpload } from \"../../utils/imgUpload\"\r\nimport { getDataAPI, postDataAPI } from \"../../utils/fetchData\"\r\n\r\n\r\nexport const POST_TYPES = {\r\n    // LOADING: 'LOADING',\r\n    CREATE_POST: 'CREATE_POST',\r\n    GET_POST: 'GET_POST'\r\n}\r\n\r\nexport const createPost = (data, images, auth) => async(dispatch) => {\r\n    // console.log({data, images}, auth)\r\n\r\n    let media = []\r\n    \r\n    try {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: { loading: true }})\r\n\r\n        if(images.length > 0) media = await imageUpload(images, auth.token)\r\n        const newData = {...data, images: media}\r\n\r\n        const res = await postDataAPI('posts', newData, auth.token)\r\n        \r\n        dispatch({ \r\n            type: POST_TYPES.CREATE_POST, \r\n            payload: {...res.data.newPost, user: auth.user} \r\n        })\r\n\r\n        \r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: false} })\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                success: res.data.msg\r\n            })\r\n        })\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const getPosts = (token) => async(dispatch) => {\r\n    try {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: { loading: true }})\r\n        const res = await getDataAPI('posts', token)\r\n        console.log(res)\r\n\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: false} })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}