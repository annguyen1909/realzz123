{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { getDataAPI } from '../../utils/fetchData';\nexport const PROFILE_TYPES = {\n  LOADING: 'LOADING',\n  GET_USER: 'GET_USER'\n};\nexport const getProfileUsers = _ref => {\n  let {\n    users,\n    id,\n    auth\n  } = _ref;\n  return async dispatch => {\n    if (users.every(user => user._id !== id)) {\n      try {\n        dispatch({\n          type: PROFILE_TYPES.LOADING,\n          payload: true\n        });\n        const res = await getDataAPI(`/user/${id}`, auth.token);\n        dispatch({\n          type: PROFILE_TYPES.GET_USER,\n          payload: res.data\n        });\n        dispatch({\n          type: PROFILE_TYPES.LOADING,\n          payload: false\n        });\n      } catch (err) {\n        dispatch({\n          type: GLOBALTYPES.ALERT,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const updateProfileUser = _ref2 => {\n  let {\n    users,\n    avatar\n  } = _ref2;\n  return async dispatch => {};\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","getDataAPI","PROFILE_TYPES","LOADING","GET_USER","getProfileUsers","users","id","auth","dispatch","every","user","_id","type","payload","res","token","data","err","ALERT","error","response","msg","updateProfileUser","avatar"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,OAAO,MAAMC,aAAa,GAAI;AAC1BC,EAAAA,OAAO,EAAE,SADiB;AAE1BC,EAAAA,QAAQ,EAAE;AAFgB,CAAvB;AAKP,OAAO,MAAMC,eAAe,GAAG;AAAA,MAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,EAAT;AAAaC,IAAAA;AAAb,GAAD;AAAA,SAAyB,MAAMC,QAAN,IAAoB;AACxE,QAAGH,KAAK,CAACI,KAAN,CAAYC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaL,EAAjC,CAAH,EAAyC;AACrC,UAAI;AACAE,QAAAA,QAAQ,CAAC;AAACI,UAAAA,IAAI,EAAEX,aAAa,CAACC,OAArB;AAA8BW,UAAAA,OAAO,EAAE;AAAvC,SAAD,CAAR;AACA,cAAMC,GAAG,GAAG,MAAMd,UAAU,CAAE,SAAQM,EAAG,EAAb,EAAgBC,IAAI,CAACQ,KAArB,CAA5B;AACAP,QAAAA,QAAQ,CAAC;AACLI,UAAAA,IAAI,EAAEX,aAAa,CAACE,QADf;AAELU,UAAAA,OAAO,EAAEC,GAAG,CAACE;AAFR,SAAD,CAAR;AAIAR,QAAAA,QAAQ,CAAC;AAACI,UAAAA,IAAI,EAAEX,aAAa,CAACC,OAArB;AAA8BW,UAAAA,OAAO,EAAE;AAAvC,SAAD,CAAR;AACC,OARL,CAUA,OAAOI,GAAP,EAAY;AACRT,QAAAA,QAAQ,CAAC;AACLI,UAAAA,IAAI,EAAEb,WAAW,CAACmB,KADb;AAELL,UAAAA,OAAO,EAAE;AAACM,YAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaJ,IAAb,CAAkBK;AAA1B;AAFJ,SAAD,CAAR;AAGH;AACJ;AACJ,GAlB8B;AAAA,CAAxB;AAoBP,OAAO,MAAMC,iBAAiB,GAAG;AAAA,MAAC;AAAEjB,IAAAA,KAAF;AAASkB,IAAAA;AAAT,GAAD;AAAA,SAAuB,MAAMf,QAAN,IAAoB,CAE3E,CAFgC;AAAA,CAA1B","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { getDataAPI } from '../../utils/fetchData'\r\n\r\nexport const PROFILE_TYPES =  {\r\n    LOADING: 'LOADING',\r\n    GET_USER: 'GET_USER'\r\n}\r\n\r\nexport const getProfileUsers = ({ users, id, auth }) => async(dispatch)  => {\r\n    if(users.every(user => user._id !== id)) {\r\n        try {\r\n            dispatch({type: PROFILE_TYPES.LOADING, payload: true})\r\n            const res = await getDataAPI(`/user/${id}`, auth.token)\r\n            dispatch({\r\n                type: PROFILE_TYPES.GET_USER,\r\n                payload: res.data\r\n            })\r\n            dispatch({type: PROFILE_TYPES.LOADING, payload: false})\r\n            }\r\n            \r\n        catch (err) {\r\n            dispatch({\r\n                type: GLOBALTYPES.ALERT, \r\n                payload: {error: err.response.data.msg}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateProfileUser = ({ users, avatar }) => async(dispatch)  => {\r\n\r\n}"]},"metadata":{},"sourceType":"module"}