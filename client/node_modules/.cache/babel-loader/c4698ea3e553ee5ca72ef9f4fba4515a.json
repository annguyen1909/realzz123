{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI } from \"../../utils/fetchData\";\nexport const JOB_TYPES = {\n  LOADING_JOB: 'LOADING_JOB',\n  APPLY_JOB: 'APPLY_JOB'\n};\nexport const applyJob = (data, auth, status) => async dispatch => {\n  if (data.sop.length < 10) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Your reason to apply is too short\"\n    }\n  });\n  console.log(data);\n  console.log(status._id);\n\n  try {\n    // dispatch({type: JOB_TYPES.LOADING_POST, payload: { loading: true }})\n    const res = await postDataAPI(`post/${status._id}/job`, data, auth.token);\n    console.log(res);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/jobAction.js"],"names":["GLOBALTYPES","postDataAPI","JOB_TYPES","LOADING_JOB","APPLY_JOB","applyJob","data","auth","status","dispatch","sop","length","type","ALERT","payload","error","console","log","_id","res","token","err","response","msg"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG;AACrBC,EAAAA,WAAW,EAAE,aADQ;AAErBC,EAAAA,SAAS,EAAE;AAFU,CAAlB;AAKP,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,MAAb,KAAwB,MAAMC,QAAN,IAAmB;AAC/D,MAAIH,IAAI,CAACI,GAAL,CAASC,MAAT,GAAkB,EAAtB,EAA0B,OAAOF,QAAQ,CAAC;AAACG,IAAAA,IAAI,EAAEZ,WAAW,CAACa,KAAnB;AAA0BC,IAAAA,OAAO,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR;AAAnC,GAAD,CAAf;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACU,GAAnB;;AACA,MAAI;AACA;AACA,UAAMC,GAAG,GAAG,MAAMlB,WAAW,CAAE,QAAOO,MAAM,CAACU,GAAI,MAApB,EAA2BZ,IAA3B,EAAiCC,IAAI,CAACa,KAAtC,CAA7B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAEH,GALD,CAKE,OAAOE,GAAP,EAAY;AACVZ,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEZ,WAAW,CAACa,KADb;AAELC,MAAAA,OAAO,EAAG;AACNC,QAAAA,KAAK,EAAEM,GAAG,CAACC,QAAJ,CAAahB,IAAb,CAAkBiB;AADnB;AAFL,KAAD,CAAR;AAMH;AAEJ,CAlBM","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI } from \"../../utils/fetchData\";\r\n\r\nexport const JOB_TYPES = {\r\n    LOADING_JOB: 'LOADING_JOB',\r\n    APPLY_JOB: 'APPLY_JOB',\r\n}\r\n\r\nexport const applyJob = (data, auth, status) => async(dispatch) => {\r\n    if (data.sop.length < 10) return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your reason to apply is too short\"}})\r\n    console.log(data)\r\n    console.log(status._id)\r\n    try {\r\n        // dispatch({type: JOB_TYPES.LOADING_POST, payload: { loading: true }})\r\n        const res = await postDataAPI(`post/${status._id}/job`, data, auth.token)\r\n        console.log(res)\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}