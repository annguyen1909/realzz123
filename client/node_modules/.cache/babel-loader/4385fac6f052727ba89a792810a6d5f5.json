{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { imageUpload } from \"../../utils/imgUpload\";\nimport { getDataAPI, postDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport axios from \"axios\";\nexport const POST_TYPES = {\n  CREATE_POST: 'CREATE_POST',\n  LOADING_POST: 'LOADING_POST',\n  GET_POSTS: 'GET_POSTS',\n  UPDATE_POST: 'UPDATE_POST',\n  GET_POST: 'GET_POST'\n};\nexport const createPost = (data, images, auth) => async dispatch => {\n  // console.log({data, images}, auth)\n  let media = [];\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (images.length > 0) media = await imageUpload(images, auth.token);\n    const newData = { ...data,\n      images: media\n    };\n    const res = await postDataAPI('posts', newData, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: { ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getDataAPI('posts', token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getAllPosts = () => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await axios.get(`/api/allposts`);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (data, images, auth, status) => async dispatch => {\n  let media = [];\n  const imgNewURL = images.filter(img => !img.url);\n  const imgOldURL = images.filter(img => img.url);\n  console.log(status.data); // if (status.data === data && imgNewURL.length === 0 && imgOldURL.length === status.images.length) return;\n  // try {\n  //     dispatch({type: GLOBALTYPES.ALERT, payload: { loading: true }})\n  //     if(imgNewURL.length > 0) media = await imageUpload(imgNewURL)\n  //     const newData = {...data, images: media}\n  //     const res = await patchDataAPI(`post/${status._id}`, newData, auth.token)\n  //     dispatch({ \n  //         type: POST_TYPES.CREATE_POST, \n  //         payload: {...res.data.newPost, user: auth.user} \n  //     })\n  //     dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: false} })\n  //     dispatch({\n  //         type: GLOBALTYPES.ALERT, \n  //         payload: ({\n  //             success: res.data.msg\n  //         })\n  //     })\n  // } catch (err) {\n  //     dispatch({\n  //         type: GLOBALTYPES.ALERT, \n  //         payload: ({\n  //             error: err.response.data.msg\n  //         })\n  //     })\n  // }\n};\nexport const getPost = _ref => {\n  let {\n    detailPost,\n    id,\n    auth\n  } = _ref;\n  return async dispatch => {\n    if (detailPost.every(post => post._id !== id)) {\n      try {\n        const res = await getDataAPI(`post/${id}`, auth.token);\n        dispatch({\n          type: POST_TYPES.GET_POST,\n          payload: res.data.post\n        });\n      } catch (err) {\n        dispatch({\n          type: GLOBALTYPES.ALERT,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","imageUpload","getDataAPI","postDataAPI","patchDataAPI","axios","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","createPost","data","images","auth","dispatch","media","type","ALERT","payload","loading","length","token","newData","res","newPost","user","success","msg","err","error","response","getPosts","getAllPosts","get","updatePost","status","imgNewURL","filter","img","url","imgOldURL","console","log","getPost","detailPost","id","every","post","_id"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\"\r\nimport { imageUpload } from \"../../utils/imgUpload\"\r\nimport { getDataAPI, postDataAPI, patchDataAPI } from \"../../utils/fetchData\"\r\nimport axios from \"axios\"\r\n\r\nexport const POST_TYPES = {\r\n    CREATE_POST: 'CREATE_POST',\r\n    LOADING_POST: 'LOADING_POST',\r\n    GET_POSTS: 'GET_POSTS',\r\n    UPDATE_POST: 'UPDATE_POST',\r\n    GET_POST: 'GET_POST',\r\n   \r\n}\r\n\r\nexport const createPost = (data, images, auth) => async(dispatch) => {\r\n    // console.log({data, images}, auth)\r\n\r\n    let media = []\r\n    \r\n    try {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: { loading: true }})\r\n\r\n        if(images.length > 0) media = await imageUpload(images, auth.token)\r\n        const newData = {...data, images: media}\r\n\r\n        const res = await postDataAPI('posts', newData, auth.token)\r\n        \r\n        dispatch({ \r\n            type: POST_TYPES.CREATE_POST, \r\n            payload: {...res.data.newPost, user: auth.user} \r\n        })\r\n\r\n        \r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: false} })\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                success: res.data.msg\r\n            })\r\n        })\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const getPosts = (token) => async(dispatch) => {\r\n    try {\r\n        dispatch({type: POST_TYPES.LOADING_POST, payload: { loading: true }})\r\n        const res = await getDataAPI('posts', token)\r\n        dispatch({\r\n            type: POST_TYPES.GET_POSTS,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: {loading: false} })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const getAllPosts = () => async(dispatch) => {\r\n    try {\r\n        dispatch({type: POST_TYPES.LOADING_POST, payload: { loading: true }})\r\n        const res = await axios.get(`/api/allposts`)\r\n        dispatch({\r\n            type: POST_TYPES.GET_POSTS,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: {loading: false} })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updatePost = (data, images, auth, status) => async(dispatch) => {\r\n    let media = []\r\n\r\n    const imgNewURL = images.filter(img => !img.url)\r\n    const imgOldURL = images.filter(img => img.url)\r\n    \r\n    console.log(status.data)\r\n\r\n    // if (status.data === data && imgNewURL.length === 0 && imgOldURL.length === status.images.length) return;\r\n\r\n    // try {\r\n    //     dispatch({type: GLOBALTYPES.ALERT, payload: { loading: true }})\r\n    //     if(imgNewURL.length > 0) media = await imageUpload(imgNewURL)\r\n    //     const newData = {...data, images: media}\r\n\r\n    //     const res = await patchDataAPI(`post/${status._id}`, newData, auth.token)\r\n        \r\n    //     dispatch({ \r\n    //         type: POST_TYPES.CREATE_POST, \r\n    //         payload: {...res.data.newPost, user: auth.user} \r\n    //     })\r\n\r\n        \r\n    //     dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: false} })\r\n    //     dispatch({\r\n    //         type: GLOBALTYPES.ALERT, \r\n    //         payload: ({\r\n    //             success: res.data.msg\r\n    //         })\r\n    //     })\r\n    // } catch (err) {\r\n    //     dispatch({\r\n    //         type: GLOBALTYPES.ALERT, \r\n    //         payload: ({\r\n    //             error: err.response.data.msg\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n}\r\n\r\nexport const getPost = ({detailPost, id, auth}) => async(dispatch) => {\r\n    if (detailPost.every(post => post._id !== id)) {\r\n        try {\r\n            const res = await getDataAPI(`post/${id}`, auth.token)\r\n            dispatch({type: POST_TYPES.GET_POST, payload: res.data.post})\r\n        } catch (err) {\r\n            dispatch({\r\n                type: GLOBALTYPES.ALERT, \r\n                payload: ({\r\n                    error: err.response.data.msg\r\n                })\r\n            })\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}