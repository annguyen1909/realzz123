{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { getDataAPI } from '../../utils/fetchData';\nimport { imageUpload } from '../../utils/imgUpload';\nimport { patchDataAPI } from '../../utils/fetchData';\nexport const PROFILE_TYPES = {\n  LOADING: 'LOADING_PROFILE',\n  GET_USER: 'GET_PROFILE_USER',\n  GET_ID: 'GET_PROFILE_ID'\n};\nexport const getProfileUsers = _ref => {\n  let {\n    users,\n    id,\n    auth\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: PROFILE_TYPES.GET_ID,\n      payload: id\n    });\n\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = await getDataAPI(`/user/${id}`, auth.token);\n      dispatch({\n        type: PROFILE_TYPES.GET_USER,\n        payload: res.data\n      });\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateProfileUser = _ref2 => {\n  let {\n    userData,\n    avatar,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    if (!userData.fullname) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please add your full name.\"\n      }\n    });\n    if (userData.fullname.length > 25) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Your full name too long.\"\n      }\n    });\n    if (userData.description.length > 500) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Your description too long.\"\n      }\n    });\n\n    try {\n      let media;\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n      if (avatar) media = await imageUpload([avatar], auth.token);\n      const res = await patchDataAPI(\"update\", { ...userData,\n        avatar: avatar ? media[0].url : auth.user.avatar\n      }, auth.token);\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: { ...auth,\n          user: { ...auth.user,\n            ...userData,\n            avatar: avatar ? media[0].url : auth.user.avatar\n          }\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","getDataAPI","imageUpload","patchDataAPI","PROFILE_TYPES","LOADING","GET_USER","GET_ID","getProfileUsers","users","id","auth","dispatch","type","payload","res","token","data","err","ALERT","error","response","msg","updateProfileUser","userData","avatar","fullname","length","description","media","loading","url","user","AUTH","success"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { getDataAPI } from '../../utils/fetchData'\r\nimport { imageUpload } from '../../utils/imgUpload'\r\n\r\nimport { patchDataAPI } from '../../utils/fetchData'\r\n\r\nexport const PROFILE_TYPES =  {\r\n    LOADING: 'LOADING_PROFILE',\r\n    GET_USER: 'GET_PROFILE_USER',\r\n    GET_ID: 'GET_PROFILE_ID'\r\n}\r\n\r\nexport const getProfileUsers = ({ users, id, auth }) => async(dispatch)  => {\r\n    dispatch({type: PROFILE_TYPES.GET_ID, payload: id})\r\n    try {\r\n        dispatch({type: PROFILE_TYPES.LOADING, payload: true})\r\n        const res = await getDataAPI(`/user/${id}`, auth.token)\r\n        dispatch({\r\n            type: PROFILE_TYPES.GET_USER,\r\n            payload: res.data\r\n        })\r\n        dispatch({type: PROFILE_TYPES.LOADING, payload: false})\r\n        }\r\n        \r\n    catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}})\r\n    }\r\n    \r\n}\r\n\r\nexport const updateProfileUser = ({ userData, avatar, auth }) => async(dispatch)  => {\r\n    if(!userData.fullname)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Please add your full name.\"}})\r\n\r\n    if(userData.fullname.length > 25)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your full name too long.\"}})\r\n\r\n    if(userData.description.length > 500)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your description too long.\"}})\r\n\r\n    try {\r\n        let media;\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {loading: true}})\r\n\r\n        if(avatar) media = await imageUpload([avatar], auth.token)\r\n        \r\n        const res = await patchDataAPI(\"update\", {\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar\r\n        }, auth.token)\r\n\r\n        dispatch({\r\n            type: GLOBALTYPES.AUTH,\r\n            payload: {\r\n                ...auth,\r\n                user: {\r\n                    ...auth.user, ...userData,\r\n                    avatar: avatar ? media[0].url : auth.user.avatar,\r\n                }\r\n            }\r\n        })\r\n\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {success: res.data.msg}})\r\n    } \r\n    catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}