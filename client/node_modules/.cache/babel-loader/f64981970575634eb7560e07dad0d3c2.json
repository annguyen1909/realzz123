{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { getDataAPI } from '../../utils/fetchData';\nimport { imageUpload } from '../../utils/imgUpload';\nimport { patchDataAPI } from '../../utils/fetchData';\nexport const PROFILE_TYPES = {\n  LOADING: 'LOADING',\n  GET_USER: 'GET_USER'\n};\nexport const getProfileUsers = _ref => {\n  let {\n    users,\n    id,\n    auth\n  } = _ref;\n  return async dispatch => {\n    if (users.every(user => user._id !== id)) {\n      try {\n        dispatch({\n          type: PROFILE_TYPES.LOADING,\n          payload: true\n        });\n        const res = await getDataAPI(`/user/${id}`, auth.token);\n        dispatch({\n          type: PROFILE_TYPES.GET_USER,\n          payload: res.data\n        });\n        dispatch({\n          type: PROFILE_TYPES.LOADING,\n          payload: false\n        });\n      } catch (err) {\n        dispatch({\n          type: GLOBALTYPES.ALERT,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const updateProfileUser = _ref2 => {\n  let {\n    userData,\n    avatar,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    if (!userData.fullname) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please add your full name.\"\n      }\n    });\n    if (userData.fullname.length > 25) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Your full name too long.\"\n      }\n    });\n    if (userData.description.length > 500) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Your description too long.\"\n      }\n    });\n\n    try {\n      let media;\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n      if (avatar) media = await imageUpload([avatar], auth.token);\n      console.log(media);\n      const res = await patchDataAPI(\"user\", { ...userData,\n        avatar: avatar ? media[0].url : auth.user.avatar\n      }, auth.token);\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: { ...auth,\n          user: { ...auth.user,\n            ...userData,\n            avatar: avatar ? media[0].url : auth.user.avatar\n          }\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: false\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","getDataAPI","imageUpload","patchDataAPI","PROFILE_TYPES","LOADING","GET_USER","getProfileUsers","users","id","auth","dispatch","every","user","_id","type","payload","res","token","data","err","ALERT","error","response","msg","updateProfileUser","userData","avatar","fullname","length","description","media","loading","console","log","url","AUTH"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { getDataAPI } from '../../utils/fetchData'\r\nimport { imageUpload } from '../../utils/imgUpload'\r\n\r\nimport { patchDataAPI } from '../../utils/fetchData'\r\n\r\nexport const PROFILE_TYPES =  {\r\n    LOADING: 'LOADING',\r\n    GET_USER: 'GET_USER'\r\n}\r\n\r\nexport const getProfileUsers = ({ users, id, auth }) => async(dispatch)  => {\r\n    if(users.every(user => user._id !== id)) {\r\n        try {\r\n            dispatch({type: PROFILE_TYPES.LOADING, payload: true})\r\n            const res = await getDataAPI(`/user/${id}`, auth.token)\r\n            dispatch({\r\n                type: PROFILE_TYPES.GET_USER,\r\n                payload: res.data\r\n            })\r\n            dispatch({type: PROFILE_TYPES.LOADING, payload: false})\r\n            }\r\n            \r\n        catch (err) {\r\n            dispatch({\r\n                type: GLOBALTYPES.ALERT, \r\n                payload: {error: err.response.data.msg}})\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateProfileUser = ({ userData, avatar, auth }) => async(dispatch)  => {\r\n    if(!userData.fullname)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Please add your full name.\"}})\r\n\r\n    if(userData.fullname.length > 25)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your full name too long.\"}})\r\n\r\n    if(userData.description.length > 500)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your description too long.\"}})\r\n\r\n    try {\r\n        let media;\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {loading: true}})\r\n\r\n        if(avatar) media = await imageUpload([avatar], auth.token)\r\n        console.log(media)\r\n\r\n        const res = await patchDataAPI(\"user\", {\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar\r\n        }, auth.token)\r\n\r\n        dispatch({\r\n            type: GLOBALTYPES.AUTH,\r\n            payload: {\r\n                ...auth,\r\n                user: {\r\n                    ...auth.user, ...userData,\r\n                    avatar: avatar ? media[0].url : auth.user.avatar,\r\n                }\r\n            }\r\n        })\r\n\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {loading: false}})\r\n    } \r\n    catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}