{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst usePagination = (totalPages, page) => {\n  _s();\n\n  const [firstArr, setFirstArr] = useState([]);\n  const [lastArr, setLastArr] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const newArr = [...Array(totalPages)].map((_, i) => i + 1);\n    if (totalPages < 4) return setFirstArr(newArr);\n\n    if (totalPages - page >= 4) {\n      setFirstArr(newArr.slice(page - 1, page + 2));\n      setLastArr(newArr.slice(totalPages - 1));\n    } else {\n      setFirstArr(newArr.slice(totalPages - 4, totalPages));\n      setLastArr([]);\n    }\n  }, [totalPages, page]);\n\n  const isActive = index => {\n    if (index === page) return \"active\";\n    return \"\";\n  };\n\n  const prev = () => {\n    const newPage = Math.max(page - 1, 1);\n    navigate(`?page=${newPage}`);\n  };\n\n  const next = () => {\n    const newPage = Math.min(page + 1, totalPages);\n    navigate(`?page=${newPage}`);\n  };\n\n  const jump = num => {\n    navigate(`?page=${num}`);\n  };\n\n  return {\n    firstArr,\n    lastArr,\n    navigate,\n    isActive,\n    prev,\n    next,\n    jump\n  };\n};\n\n_s(usePagination, \"A8axuOXk4Q6xS1SGgZ1T6HUMYk0=\", false, function () {\n  return [useNavigate];\n});\n\nexport default usePagination;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/hooks/usePagination.js"],"names":["React","useState","useEffect","useNavigate","usePagination","totalPages","page","firstArr","setFirstArr","lastArr","setLastArr","navigate","newArr","Array","map","_","i","slice","isActive","index","prev","newPage","Math","max","next","min","jump","num"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,aAAa,GAAG,CAACC,UAAD,EAAaC,IAAb,KAAsB;AAAA;;AAC1C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMU,QAAQ,GAAGR,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,MAAM,GAAG,CAAC,GAAGC,KAAK,CAACR,UAAD,CAAT,EAAuBS,GAAvB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAAzC,CAAf;AACA,QAAGX,UAAU,GAAG,CAAhB,EACE,OAAOG,WAAW,CAACI,MAAD,CAAlB;;AAEF,QAAGP,UAAU,GAAGC,IAAb,IAAqB,CAAxB,EAA0B;AACxBE,MAAAA,WAAW,CAACI,MAAM,CAACK,KAAP,CAAaX,IAAI,GAAG,CAApB,EAAuBA,IAAI,GAAG,CAA9B,CAAD,CAAX;AACAI,MAAAA,UAAU,CAACE,MAAM,CAACK,KAAP,CAAaZ,UAAU,GAAG,CAA1B,CAAD,CAAV;AACD,KAHD,MAGK;AACHG,MAAAA,WAAW,CAACI,MAAM,CAACK,KAAP,CAAaZ,UAAU,GAAG,CAA1B,EAA6BA,UAA7B,CAAD,CAAX;AACAK,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF,GAZQ,EAYN,CAACL,UAAD,EAAaC,IAAb,CAZM,CAAT;;AAgBA,QAAMY,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAGA,KAAK,KAAKb,IAAb,EAAmB,OAAO,QAAP;AACnB,WAAO,EAAP;AACD,GAHD;;AAKA,QAAMc,IAAI,GAAG,MAAM;AACjB,UAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASjB,IAAI,GAAG,CAAhB,EAAmB,CAAnB,CAAhB;AACAK,IAAAA,QAAQ,CAAE,SAAQU,OAAQ,EAAlB,CAAR;AACD,GAHD;;AAKA,QAAMG,IAAI,GAAG,MAAM;AACjB,UAAMH,OAAO,GAAGC,IAAI,CAACG,GAAL,CAASnB,IAAI,GAAG,CAAhB,EAAmBD,UAAnB,CAAhB;AACAM,IAAAA,QAAQ,CAAE,SAAQU,OAAQ,EAAlB,CAAR;AACD,GAHD;;AAKA,QAAMK,IAAI,GAAIC,GAAD,IAAS;AACpBhB,IAAAA,QAAQ,CAAE,SAAQgB,GAAI,EAAd,CAAR;AACD,GAFD;;AAIA,SAAO;AAAEpB,IAAAA,QAAF;AAAYE,IAAAA,OAAZ;AAAqBE,IAAAA,QAArB;AAA+BO,IAAAA,QAA/B;AAAyCE,IAAAA,IAAzC;AAA+CI,IAAAA,IAA/C;AAAqDE,IAAAA;AAArD,GAAP;AACD,CAzCD;;GAAMtB,a;UAGaD,W;;;AAwCnB,eAAeC,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst usePagination = (totalPages, page) => {\r\n  const [firstArr, setFirstArr] = useState([])\r\n  const [lastArr, setLastArr] = useState([])\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const newArr = [...Array(totalPages)].map((_, i) => i + 1)\r\n    if(totalPages < 4)\r\n      return setFirstArr(newArr);\r\n\r\n    if(totalPages - page >= 4){\r\n      setFirstArr(newArr.slice(page - 1, page + 2))\r\n      setLastArr(newArr.slice(totalPages - 1))\r\n    }else{\r\n      setFirstArr(newArr.slice(totalPages - 4, totalPages))\r\n      setLastArr([])\r\n    }\r\n  }, [totalPages, page])\r\n\r\n  \r\n\r\n  const isActive = (index) => {\r\n    if(index === page) return \"active\"\r\n    return \"\"\r\n  }\r\n\r\n  const prev = () => {\r\n    const newPage = Math.max(page - 1, 1)\r\n    navigate(`?page=${newPage}`)\r\n  }\r\n\r\n  const next = () => {\r\n    const newPage = Math.min(page + 1, totalPages)\r\n    navigate(`?page=${newPage}`)\r\n  }\r\n\r\n  const jump = (num) => {\r\n    navigate(`?page=${num}`)\r\n  }\r\n\r\n  return { firstArr, lastArr, navigate, isActive, prev, next, jump }\r\n}\r\n\r\nexport default usePagination"]},"metadata":{},"sourceType":"module"}