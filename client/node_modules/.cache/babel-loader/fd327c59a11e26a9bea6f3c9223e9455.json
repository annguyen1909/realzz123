{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI } from '../../utils/fetchData';\nimport validation from '../../utils/validation';\nexport const login = data => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI('login', data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const refreshToken = () => async dispatch => {\n  const firstLogin = localStorage.getItem(\"firstLogin\");\n\n  if (firstLogin) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    try {\n      const res = await postDataAPI('refresh_token');\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: {\n          token: res.data.access_token,\n          user: res.data.user\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {}\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const register = data => async dispatch => {\n  try {\n    const check = validation(data);\n    if (check.errLength > 0) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: check.errMsg\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/redux/actions/authAction.js"],"names":["GLOBALTYPES","postDataAPI","validation","login","data","dispatch","type","ALERT","payload","loading","res","AUTH","token","access_token","user","localStorage","setItem","success","msg","err","error","response","refreshToken","firstLogin","getItem","register","check","errLength","errMsg"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { postDataAPI } from '../../utils/fetchData'\r\nimport validation from '../../utils/validation'\r\n\r\nexport const login = (data) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} })\r\n        const res = await postDataAPI('login', data)\r\n        dispatch({\r\n            type: GLOBALTYPES.AUTH, \r\n            payload: ({\r\n                token:  res.data.access_token,\r\n                user: res.data.user\r\n            })\r\n        })\r\n        localStorage.setItem(\"firstLogin\", true)\r\n\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                success: res.data.msg\r\n            })\r\n        })\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const refreshToken = () => async (dispatch) => {\r\n    const firstLogin = localStorage.getItem(\"firstLogin\")\r\n    if(firstLogin){\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} })\r\n\r\n        try {\r\n            const res = await postDataAPI('refresh_token')\r\n            dispatch({\r\n                type: GLOBALTYPES.AUTH, \r\n                payload: {\r\n                    token:  res.data.access_token,\r\n                    user: res.data.user\r\n                }\r\n            })\r\n            dispatch({ type: GLOBALTYPES.ALERT, payload: {} })\r\n        } catch (err) {\r\n            dispatch({\r\n                type: GLOBALTYPES.ALERT, \r\n                payload: ({\r\n                    error: err.response.data.msg\r\n                })\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (data) => async (dispatch) => {\r\n    try {\r\n        const check = validation(data)\r\n        if(check.errLength > 0)\r\n        return dispatch({type: GLOBALTYPES.ALERT, payload: check.errMsg})\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: ({\r\n                error: err.response.data.msg\r\n            })\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}