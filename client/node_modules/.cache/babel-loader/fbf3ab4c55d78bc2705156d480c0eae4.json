{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport useCustomRoute from './useCustomRoute';\n\nconst usePagination = (totalPages, page, sort) => {\n  _s();\n\n  const {\n    pushQuery\n  } = useCustomRoute();\n  const {\n    firstArr,\n    lastArr\n  } = useMemo(() => {\n    const newArr = [...Array(totalPages)].map((_, i) => i + 1);\n    if (totalPages < 4) return {\n      firstArr: newArr,\n      lastArr: []\n    };\n\n    if (totalPages - page >= 4) {\n      return {\n        firstArr: newArr.slice(page - 1, page + 2),\n        lastArr: newArr.slice(totalPages - 1)\n      };\n    } else {\n      return {\n        firstArr: newArr.slice(totalPages - 4, totalPages),\n        lastArr: []\n      };\n    }\n  }, [totalPages, page]);\n\n  const isActive = index => {\n    if (index === page) return \"active\";\n    return \"\";\n  };\n\n  const prev = () => {\n    const newPage = Math.max(page - 1, 1);\n    pushQuery({\n      page: newPage,\n      sort\n    });\n  };\n\n  const next = () => {\n    const newPage = Math.min(page + 1, totalPages);\n    pushQuery({\n      page: newPage,\n      sort\n    });\n  };\n\n  const jump = num => {\n    pushQuery({\n      page: num,\n      sort\n    });\n  };\n\n  return {\n    firstArr,\n    lastArr,\n    isActive,\n    prev,\n    next,\n    jump\n  };\n};\n\n_s(usePagination, \"AqlNAA2XuxtVZ9QTFZ0EMfle2No=\", false, function () {\n  return [useCustomRoute];\n});\n\nexport default usePagination;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/hook/usePagination.jsx"],"names":["useMemo","useCustomRoute","usePagination","totalPages","page","sort","pushQuery","firstArr","lastArr","newArr","Array","map","_","i","slice","isActive","index","prev","newPage","Math","max","next","min","jump","num"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,aAAa,GAAG,CAACC,UAAD,EAAcC,IAAd,EAAoBC,IAApB,KAA6B;AAAA;;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAgBL,cAAc,EAApC;AAEA,QAAM;AAACM,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAsBR,OAAO,CAAC,MAAM;AACtC,UAAMS,MAAM,GAAG,CAAC,GAAGC,KAAK,CAACP,UAAD,CAAT,EAAuBQ,GAAvB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAAzC,CAAf;AACA,QAAIV,UAAU,GAAG,CAAjB,EACI,OAAO;AACHI,MAAAA,QAAQ,EAAEE,MADP;AACeD,MAAAA,OAAO,EAAE;AADxB,KAAP;;AAIJ,QAAGL,UAAU,GAAGC,IAAb,IAAqB,CAAxB,EAA2B;AACvB,aAAM;AACFG,QAAAA,QAAQ,EAAEE,MAAM,CAACK,KAAP,CAAaV,IAAI,GAAG,CAApB,EAAuBA,IAAI,GAAG,CAA9B,CADR;AAEFI,QAAAA,OAAO,EAAEC,MAAM,CAACK,KAAP,CAAaX,UAAU,GAAG,CAA1B;AAFP,OAAN;AAIH,KALD,MAKO;AACH,aAAO;AACHI,QAAAA,QAAQ,EAAEE,MAAM,CAACK,KAAP,CAAaX,UAAU,GAAG,CAA1B,EAA6BA,UAA7B,CADP;AAEHK,QAAAA,OAAO,EAAE;AAFN,OAAP;AAIH;AACJ,GAlBkC,EAkBhC,CAACL,UAAD,EAAaC,IAAb,CAlBgC,CAAnC;;AAqBA,QAAMW,QAAQ,GAAIC,KAAD,IAAW;AACxB,QAAIA,KAAK,KAAKZ,IAAd,EAAoB,OAAO,QAAP;AACpB,WAAO,EAAP;AACH,GAHD;;AAKA,QAAMa,IAAI,GAAI,MAAM;AAChB,UAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAShB,IAAI,GAAG,CAAhB,EAAmB,CAAnB,CAAhB;AACAE,IAAAA,SAAS,CAAC;AAACF,MAAAA,IAAI,EAAEc,OAAP;AAAgBb,MAAAA;AAAhB,KAAD,CAAT;AACH,GAHD;;AAKA,QAAMgB,IAAI,GAAG,MAAM;AACf,UAAMH,OAAO,GAAGC,IAAI,CAACG,GAAL,CAASlB,IAAI,GAAG,CAAhB,EAAmBD,UAAnB,CAAhB;AACDG,IAAAA,SAAS,CAAC;AAACF,MAAAA,IAAI,EAAEc,OAAP;AAAgBb,MAAAA;AAAhB,KAAD,CAAT;AACF,GAHD;;AAKA,QAAMkB,IAAI,GAAIC,GAAD,IAAS;AAClBlB,IAAAA,SAAS,CAAC;AAACF,MAAAA,IAAI,EAAEoB,GAAP;AAAYnB,MAAAA;AAAZ,KAAD,CAAT;AACH,GAFD;;AAGA,SAAO;AAACE,IAAAA,QAAD;AAAWC,IAAAA,OAAX;AAAoBO,IAAAA,QAApB;AAA8BE,IAAAA,IAA9B;AAAoCI,IAAAA,IAApC;AAA0CE,IAAAA;AAA1C,GAAP;AACH,CA3CD;;GAAMrB,a;UACoBD,c;;;AA4C1B,eAAeC,aAAf","sourcesContent":["import { useMemo } from 'react'\r\nimport useCustomRoute from './useCustomRoute'\r\n\r\nconst usePagination = (totalPages,  page, sort) => {\r\n    const { pushQuery } = useCustomRoute()\r\n  \r\n    const {firstArr, lastArr} = useMemo(() => {\r\n        const newArr = [...Array(totalPages)].map((_, i) => i + 1)\r\n        if (totalPages < 4) \r\n            return {\r\n                firstArr: newArr, lastArr: [] \r\n            }\r\n\r\n        if(totalPages - page >= 4) {\r\n            return{\r\n                firstArr: newArr.slice(page - 1, page + 2),\r\n                lastArr: newArr.slice(totalPages - 1)\r\n            }\r\n        } else {\r\n            return {\r\n                firstArr: newArr.slice(totalPages - 4, totalPages),\r\n                lastArr: []\r\n            }\r\n        }\r\n    }, [totalPages, page])\r\n\r\n\r\n    const isActive = (index) => {\r\n        if (index === page) return \"active\"\r\n        return \"\"\r\n    }\r\n\r\n    const prev =  () => {\r\n        const newPage = Math.max(page - 1, 1)\r\n        pushQuery({page: newPage, sort})\r\n    }\r\n\r\n    const next = () => {\r\n        const newPage = Math.min(page + 1, totalPages)\r\n       pushQuery({page: newPage, sort})\r\n    }\r\n\r\n    const jump = (num) => {\r\n        pushQuery({page: num, sort})\r\n    }\r\n    return {firstArr, lastArr, isActive, prev, next, jump}\r\n}\r\n\r\nexport default usePagination"]},"metadata":{},"sourceType":"module"}