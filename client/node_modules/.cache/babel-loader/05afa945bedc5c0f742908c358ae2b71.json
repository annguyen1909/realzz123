{"ast":null,"code":"// import { useState, useEffect } from 'react'\n// import { useNavigate } from 'react-router-dom'\n// const usePagination = (totalPages, page) => {\n//   const [firstArr, setFirstArr] = useState([])\n//   const [lastArr, setLastArr] = useState([])\n//   const navigate = useNavigate()\n//   useEffect(() => {\n//     const newArr = [...Array(totalPages)].map((_, i) => i + 1)\n//     if(totalPages < 4)\n//       return setFirstArr(newArr);\n//     if(totalPages - page >= 4){\n//       setFirstArr(newArr.slice(page - 1, page + 2))\n//       setLastArr(newArr.slice(totalPages - 1))\n//     }else{\n//       setFirstArr(newArr.slice(totalPages - 4, totalPages))\n//       setLastArr([])\n//     }\n//   }, [totalPages, page])\n//   const isActive = (index) => {\n//     if(index === page) return \"active\"\n//     return \"\"\n//   }\n//   const prev = () => {\n//     const newPage = Math.max(page - 1, 1)\n//     navigate(`?page=${newPage}`)\n//   }\n//   const next = () => {\n//     const newPage = Math.min(page + 1, totalPages)\n//     navigate(`?page=${newPage}`)\n//   }\n//   const jump = (num) => {\n//     navigate(`?page=${num}`)\n//   }\n//   return { firstArr, lastArr, navigate, isActive, prev, next, jump }\n// }\n// export default usePagination","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/University/I.T/Year 1/Software Engineering Project Management/Project/real/client/src/hooks/usePagination.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import { useState, useEffect } from 'react'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\n// const usePagination = (totalPages, page) => {\r\n//   const [firstArr, setFirstArr] = useState([])\r\n//   const [lastArr, setLastArr] = useState([])\r\n//   const navigate = useNavigate()\r\n\r\n//   useEffect(() => {\r\n//     const newArr = [...Array(totalPages)].map((_, i) => i + 1)\r\n//     if(totalPages < 4)\r\n//       return setFirstArr(newArr);\r\n\r\n//     if(totalPages - page >= 4){\r\n//       setFirstArr(newArr.slice(page - 1, page + 2))\r\n//       setLastArr(newArr.slice(totalPages - 1))\r\n//     }else{\r\n//       setFirstArr(newArr.slice(totalPages - 4, totalPages))\r\n//       setLastArr([])\r\n//     }\r\n//   }, [totalPages, page])\r\n\r\n  \r\n\r\n//   const isActive = (index) => {\r\n//     if(index === page) return \"active\"\r\n//     return \"\"\r\n//   }\r\n\r\n//   const prev = () => {\r\n//     const newPage = Math.max(page - 1, 1)\r\n//     navigate(`?page=${newPage}`)\r\n//   }\r\n\r\n//   const next = () => {\r\n//     const newPage = Math.min(page + 1, totalPages)\r\n//     navigate(`?page=${newPage}`)\r\n//   }\r\n\r\n//   const jump = (num) => {\r\n//     navigate(`?page=${num}`)\r\n//   }\r\n\r\n//   return { firstArr, lastArr, navigate, isActive, prev, next, jump }\r\n// }\r\n\r\n// export default usePagination"]},"metadata":{},"sourceType":"module"}